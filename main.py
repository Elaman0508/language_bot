import telebot
from telebot import types
from googletrans import Translator
import random

API_TOKEN = '7019669863:AAGDpWYmnYQkhPvjyCBhxeohmLurNNcGvcI'

bot = telebot.TeleBot(API_TOKEN)
translator = Translator()

translation_history = {}
user_settings = {}
guessing_games = {}

@bot.message_handler(commands=['start'])
def handle_start(message):
    markup = types.ReplyKeyboardMarkup(row_width=1)
    translate_button = types.KeyboardButton('üìù –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
    history_button = types.KeyboardButton('üìö –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤')
    reminder_button = types.KeyboardButton('‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    guess_number_button = types.KeyboardButton('üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ')
    markup.add(translate_button, history_button, reminder_button, guess_number_button)
    
    bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == 'üìù –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç')
def handle_translate_prompt(message):
    bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏.")

@bot.message_handler(func=lambda message: message.text == 'üìö –ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤')
def handle_history(message):
    user_id = message.chat.id
    
    if user_id in translation_history:
        history = translation_history[user_id]
        history_text = '\n'.join([f"{original} -> {translated}" for original, translated in history])
        bot.reply_to(message, f"–ò—Å—Ç–æ—Ä–∏—è –ø–µ—Ä–µ–≤–æ–¥–æ–≤:\n{history_text}")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤.")

@bot.message_handler(func=lambda message: message.text == '‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
def handle_reminders(message):
    user_id = message.chat.id
    markup = types.ReplyKeyboardMarkup(row_width=1)
    add_reminder_button = types.KeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
    view_reminders_button = types.KeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
    markup.add(add_reminder_button, view_reminders_button)
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')
def handle_add_reminder_prompt(message):
    user_id = message.chat.id
    user_settings[user_id] = user_settings.get(user_id, {})
    user_settings[user_id]['adding_reminder'] = True
    bot.reply_to(message, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:")

@bot.message_handler(func=lambda message: user_settings.get(message.chat.id, {}).get('adding_reminder', False))
def handle_add_reminder(message):
    user_id = message.chat.id
    user_settings[user_id]['adding_reminder'] = False
    if 'reminders' not in user_settings[user_id]:
        user_settings[user_id]['reminders'] = []
    user_settings[user_id]['reminders'].append(message.text)
    bot.reply_to(message, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

@bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')
def handle_view_reminders(message):
    user_id = message.chat.id
    reminders = user_settings.get(user_id, {}).get('reminders', [])
    
    if reminders:
        reminders_text = '\n'.join([f"{idx + 1}. {reminder}" for idx, reminder in enumerate(reminders)])
        bot.reply_to(message, f"–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n{reminders_text}")
    else:
        bot.reply_to(message, "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")

@bot.message_handler(func=lambda message: message.text == 'üî¢ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ')
def handle_guess_number_prompt(message):
    user_id = message.chat.id
    guessing_games[user_id] = {
        'number': random.randint(1, 100),
        'attempts': 0
    }
    bot.reply_to(message, "–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100. –ü–æ–ø—Ä–æ–±—É–π —É–≥–∞–¥–∞—Ç—å!")

@bot.message_handler(func=lambda message: message.chat.id in guessing_games)
def handle_guess_number(message):
    user_id = message.chat.id
    game = guessing_games[user_id]
    
    try:
        guess = int(message.text)
    except ValueError:
        bot.reply_to(message, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    game['attempts'] += 1
    
    if guess == game['number']:
        bot.reply_to(message, f"–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —É–≥–∞–¥–∞–ª —á–∏—Å–ª–æ {game['number']} –∑–∞ {game['attempts']} –ø–æ–ø—ã—Ç–æ–∫!")
        del guessing_games[user_id]  
    elif guess < game['number']:
        bot.reply_to(message, "–ú–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ.")
    else:
        bot.reply_to(message, "–ú–æ–µ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ.")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    user_id = message.chat.id
    user_text = message.text
    
    translation = translator.translate(user_text, dest='en')
    translated_text = translation.text
    
    bot.reply_to(message, translated_text)
    
    if user_id not in translation_history:
        translation_history[user_id] = []
    translation_history[user_id].append((user_text, translated_text))

if __name__ == '__main__':
    bot.polling()
